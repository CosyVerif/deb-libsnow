#! /usr/bin/perl -sW

# We are going to read the build file (a log of the source package building)
# in slurp mode, then we will check each possible error (not exhaustively)
# detected by lintian (a tool that checks if the package is conform with
# Debian policy) and correct the package building configuration files 
# accordingly.

use strict;

if(our$h) {
    print "correct_lintian source_build_log\n\nDescritpion:\n\tCorrects the debian folder built by dh_make using the .build file\n\tgenerated by 'debuild -S' command.\n\nOptions:\n";
    exit 0;
}

print "Starting configuration files edition due to lintian messages.\n";

my$buildfilename = shift;
open BUILDLOG, $buildfilename;
$/ = undef;
my$log = <BUILDLOG>;    # the entire building log

$log =~ m/Now running lintian\.\.\.\n(.*)\nFinished running lintian/s;
my$lintianLog = $1;  # the lintian part of the log

# Opening debian/control
open CONTROL, "debian/control" or die($!);
my$control = <CONTROL>;
close CONTROL;

# Opening log file
my$do_log = open LOG, ">", "../$ENV{LOGFILE}";
if($do_log) {
    my$date = localtime(time);
    print LOG "correct_lintian.pl log file. This log lists edits made by the script and warnings/errors that happened during\n
debian package building. You may want to correct them and launch a new build.\n\nTimestamp: $date\n\n";
}

# Adding descriptions
#my$binpackdesc = $ENV{BINPACKAGEDESCFILE};
#my$libpackdesc = $ENV{LIBPACKAGEDESCFILE};
#my$libdevpackdesc = $ENV{LIBDEVPACKAGEFILE};
#if ( $control =~ /Package: .*?[\s]+Architecture:/ && open DESC, $binpackdesc) {
#    my$desc = <DESC>;
#    $control =~ s/(Package: .*?[\s]+Architecture: .*?[\s]+Depends:.*?[\s]+Description:) <.*?>[\s]+ <.*?>/$1 $desc\n/s;
#    close DESC;
#}
#if ( $control =~ /Package: .*?[\s]+Section: libs[\s]/ && open DESC, $libpackdesc) {
#    my$desc = <DESC>;
#    $control =~ s/(Package: .*?[\s]+Section: libs[\s]+Architecture:.*?[\s]+Depends:.*?[\s]+Description:) <.*?>[\s]+ <.*?>/$1 $desc\n/s;
#    close DESC;
#}
#if ( $control =~ /Package: .*?-dev[\s]/ && open DESC, $libdevpackdesc) {
#    my$desc = <DESC>;
#    $control =~ s/(Package: .*?-dev[\s]+Section:.*?[\s]+Architecture:.*?[\s]+Depends:.*?[\s]+Description:) <.*?>[\s]+ <.*?>/$1 $desc\n/s;
#    close DESC;
#}

# Matching errors and correcting
if ( $lintianLog =~ /package-needs-versioned-debhelper-build-depends (.*?)[\s]/ ) {
    my$dh_version = $1;
    $control =~ s/debhelper (\(.*?\))/debhelper \(>= $dh_version\)/;
    print LOG "build depends debhelper version changed from $1 to (>= $dh_version)\n" if $do_log;
}
if ( $lintianLog =~ /out-of-date-standards-version \d\.\d\.\d \(current is (\d\.\d\.\d)\)/ ) {
    my$std_version = $1;
    $control =~ s/Standards-Version: (\d\.\d\.\d)/Standards-Version: $std_version/;
    print LOG "standards version changed from $1 to $std_version\n" if $do_log;
}
if ( $lintianLog =~ /ancient-standards-version \d\.\d\.\d \(current is (\d\.\d\.\d)\)/ ) {
    my$std_version = $1;
    $control =~ s/Standards-Version: \d\.\d\.\d/Standards-Version: $std_version/;
    print LOG "standards version changed from $1 to $std_version\n" if $do_log;
}
if ( $lintianLog =~ /debhelper-but-no-misc-depends/ ) {
    $control =~ s/(Package: (.*?-dev)[\s]+Section:.*?[\s]+Architecture:.*?[\s]+Depends:.*?)([\s]+Desc)/$1, \${misc:Depends}$3/s;
    print LOG "added missing dependencies for $2 package\n" if $do_log;
}
if ( $lintianLog =~ /bad-homepage/ ) {
    $control =~ s/(Homepage: )<.*?>/$1$ENV{HOMEPAGE}/;
    print LOG "added homepage\n" if $do_log;
}
if ( $lintianLog =~ /binary-without-manpage/ ) {
    print LOG "WARNING: Each binary in /usr/bin, /usr/sbin, /bin, /sbin or /usr/games should have a manual page.\n
\tIf the man pages are provided by another package on which this package depends, lintian may not be able to determine\n
\tthat man pages are available. In this case, ignore this warning\n" if $do_log;
}


# Writing in debian/control
open CONTROL, ">", "debian/control" or die($!);
print CONTROL $control;

# Closing files
close CONTROL;
close BUILDLOG;
close LOG if $do_log;


print "Configuration files edited ! You can find what has been changed in $ENV{LOGFILE}\n";
